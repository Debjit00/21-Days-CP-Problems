Statement:
You are given an array A of N elements. You need to process Q queries, in each of them you are given two integers L and R, find the OR of all elements in range L to R (inclusive). More formally find arr[L] | arr[L+1] | arr[L+2]... | arr[R] for a given L and R.

Input:
The first line contains a single integer t (1 <= t <= 10^5) - the number of test cases.
The first line of each test case contains two integers N and Q (1 <= N, Q <= 10^5) - the length of the array, and the number of queries.
The second line of each test case contains N integers A1, A2, ..., AN (0 <= Ai <= 2^30) - the elements of A.
Then Q lines follows, the i-th of them containing two integers Li and Ri (1 <= Li <= Ri <= N) - the left and right bound.

Output:
For each query print the required answer.

Sample:
input:
2
5 3
4 0 1 6 7
1 3
2 4
4 5
10 10
1 2 3 4 5 6 7 89 10 11
1 4
3 4
9 9
9 10
2 8
3 5
4 7
2 7
1 10
1 10

Output:
5
7
7
7
7
10
11
95
7
7
7
95
95














Solution C++:
#include <bits/stdc++.h>
using namespace std;
#define fastIO ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL);
#define int long long
#define lld long double
// #define ll long long
#define endl '\n'
#define tab '\t'
#define all(a) a.begin(), a.end()
#define vi vector<int>
#define vp vector<pair<int, int>>
#define vvi vector<vector<int>>
#define vb vector<bool>
#define vs vector<string>
#define mii map<int, int>
#define rep(n) for(int i=0;i<n;i++)
#define REP(i, n) for(int i=0;i<n;i++)
#define trev(x) for(auto it=x.begin(); it!=x.end(); it++)
#define yes(check) cout << (check ? "YES\n" : "NO\n")
#define gcd(a,b) __gcd(a,b)
#define lcm(a,b) a*b/gcd(a,b)
const int mod=1e9+7;

void solve() {
	int n, q;
	cin >> n >> q;
	vi a(n); rep(n) cin >> a[i];
	vvi dp(31, vi(n+1,0));

	for(int i=0; i<31; i++)
		for(int j=0; j<n; j++)
			if((a[j]>>i) % 2) dp[i][j+1] = dp[i][j] + 1;
			else dp[i][j+1] = dp[i][j];

	// for(int i=0; i<4; i++) {
	// 	for(int j=0; j<=n; j++) {
	// 		cout << dp[i][j] << " ";
	// 	} cout << endl;
	// } cout << endl;

	while(q--) {
		int l, r, ans = 0;
		cin >> l >> r;
		for(int i=0; i<31; i++) 
			if(dp[i][l-1] != dp[i][r]) 
				ans += (1<<i);
		cout << ans << endl;
	}
}

signed main() {
    fastIO;

    int t; cin >> t;
    while(t--) solve();
    return 0;
}
