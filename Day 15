Statement:
You are given two integers A and B. Now you are allowed to perform the following operations any number of times (possibly 0)
Operation:
- Choose any one of the numbers
- Reduce that number by half if divisible by 2 or reduce by two-third if divisible by 3 or reduce by four-fifth if divisible by 5 else do nothing

Find the minimum number of operations to make A and B equal else return -1 if not possible.

Input:
The first line contains an integer t (1 ≤ t ≤ 1e5) — the number of test cases.
The first line of each testcase contains two integers A and B (1 <= A, B <= 10^18)

Output:
For each test case, print the minimum number of operatiosn to make A and B equal.

Sample:
input:
4
1 5
24 30
10 15
123456789 3644999966830500000

output:
1 1
1
1 1
3
1 1
2
13717421 13717421
21








Solution C++:
#include <bits/stdc++.h>
using namespace std;
#define fast ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL);
#define int long long
#define lld long double
// #define ll long long
#define endl '\n'
#define tab '\t'
#define all(a) a.begin(), a.end()
#define vi vector<int>
#define vp vector<pair<int, int>>
#define vvi vector<vector<int>>
#define vb vector<bool>
#define vs vector<string>
#define mii map<int, int>
#define rep(n) for(int i=0;i<n;i++)
#define REP(i, n) for(int i=0;i<n;i++)
#define trev(x) for(auto it=x.begin(); it!=x.end(); it++)
#define yes(check) cout << (check ? "YES\n" : "NO\n")
#define gcd(a,b) __gcd(a,b)
#define lcm(a,b) a*b/gcd(a,b)
const int mod=1e9+7;

void solve() {
	int a, b;
	cin >> a >> b;

	int ans = 0;
	vi div = {2, 3, 5};
	for(auto d: div) {
		int x=0, y=0;
		while(a%d == 0) x++, a/=d;
		while(b%d == 0) y++, b/=d;

		ans += abs(x - y);
	}

	cout << a << " " << b << endl;
	if(a == b) cout << ans << endl;
	else cout << -1 << endl;
}

signed main() {
    fast; 

    int t; cin >> t;
    while(t--) solve();
    return 0;
}
